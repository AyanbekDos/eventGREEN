/**
 * CLOUDFLARE WORKER –î–õ–Ø EVENTGREEN BOT –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç cron triggers –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∏–∑ Python –±–æ—Ç–∞)
const NOTIFICATIONS_CONFIG = {
  "cron_triggers": [
    {
      "cron": "53 09 * * *",
      "notification_id": "notification_09_53"
    },
    {
      "cron": "55 09 * * *", 
      "notification_id": "notification_09_55"
    }
  ],
  "notifications": {
    "notification_09_53": {
      "utc_time": "09:53",
      "user_ids": ["34975055"],
      "local_info": "14:53 Asia/Almaty",
      "cron_expression": "53 09 * * *"
    },
    "notification_09_55": {
      "utc_time": "09:55", 
      "user_ids": ["7059952799"],
      "local_info": "14:55 Asia/Almaty",
      "cron_expression": "55 09 * * *"
    }
  }
};

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Worker
export default {
  async scheduled(event, env, ctx) {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º cron triggers
    console.log('üïê Cloudflare Worker cron trigger –∑–∞–ø—É—â–µ–Ω:', new Date().toISOString());
    
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
      const currentUTC = new Date();
      const currentTime = currentUTC.getUTCHours().toString().padStart(2, '0') + 
                         ':' + currentUTC.getUTCMinutes().toString().padStart(2, '0');
      
      console.log('üïê –¢–µ–∫—É—â–µ–µ UTC –≤—Ä–µ–º—è:', currentTime);
      
      // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      let notificationToSend = null;
      for (const [notificationId, notification] of Object.entries(NOTIFICATIONS_CONFIG.notifications)) {
        if (notification.utc_time === currentTime) {
          notificationToSend = { id: notificationId, ...notification };
          break;
        }
      }
      
      if (notificationToSend) {
        console.log('üì§ –ù–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', notificationToSend.id);
        await sendNotifications(notificationToSend, env);
      } else {
        console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:', currentTime);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ cron trigger:', error);
    }
  },

  async fetch(request, env, ctx) {
    // HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const url = new URL(request.url);
    
    if (url.pathname === '/health') {
      return new Response(JSON.stringify({
        status: 'ok',
        timestamp: new Date().toISOString(),
        notifications_count: Object.keys(NOTIFICATIONS_CONFIG.notifications).length
      }), {
        headers: { 'Content-Type': 'application/json' }
      });
    }
    
    if (url.pathname === '/notifications/trigger' && request.method === 'POST') {
      // –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const { notification_id } = await request.json();
      
      const notification = NOTIFICATIONS_CONFIG.notifications[notification_id];
      if (!notification) {
        return new Response(JSON.stringify({
          error: 'Notification not found',
          notification_id
        }), { 
          status: 404,
          headers: { 'Content-Type': 'application/json' }
        });
      }
      
      try {
        await sendNotifications({ id: notification_id, ...notification }, env);
        return new Response(JSON.stringify({
          success: true,
          notification_id,
          user_count: notification.user_ids.length
        }), {
          headers: { 'Content-Type': 'application/json' }
        });
      } catch (error) {
        return new Response(JSON.stringify({
          error: error.message,
          notification_id
        }), { 
          status: 500,
          headers: { 'Content-Type': 'application/json' }
        });
      }
    }
    
    if (url.pathname === '/notifications/status') {
      // –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      return new Response(JSON.stringify({
        notifications_count: Object.keys(NOTIFICATIONS_CONFIG.notifications).length,
        cron_triggers_count: NOTIFICATIONS_CONFIG.cron_triggers.length,
        notifications: NOTIFICATIONS_CONFIG.notifications,
        current_utc: new Date().toISOString()
      }), {
        headers: { 'Content-Type': 'application/json' }
      });
    }
    
    return new Response('EventGREEN Bot Notifications Worker', { status: 200 });
  }
};

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ Telegram Bot API
 */
async function sendNotifications(notification, env) {
  console.log('üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', notification.id);
  console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', notification.user_ids);
  console.log('üåç –õ–æ–∫–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', notification.local_info);
  
  const telegramToken = env.TELEGRAM_BOT_TOKEN;
  if (!telegramToken) {
    throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }
  
  const results = [];
  
  for (const userId of notification.user_ids) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const events = await getUserEvents(userId, env);
      
      if (events && events.length > 0) {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const message = await formatDailyNotification(events, notification.local_info);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        const telegramUrl = `https://api.telegram.org/bot${telegramToken}/sendMessage`;
        const response = await fetch(telegramUrl, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: userId,
            text: message,
            parse_mode: 'HTML'
          })
        });
        
        if (response.ok) {
          console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
          results.push({ userId, status: 'sent', events_count: events.length });
        } else {
          const error = await response.text();
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
          results.push({ userId, status: 'failed', error });
        }
      } else {
        console.log(`üì≠ –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        results.push({ userId, status: 'no_events' });
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      results.push({ userId, status: 'error', error: error.message });
    }
  }
  
  console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏:', results);
  return results;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Google Sheets (—á–µ—Ä–µ–∑ API –∏–ª–∏ KV)
 */
async function getUserEvents(userId, env) {
  // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ Google Sheets API
  // –∏–ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º –≤ Cloudflare KV
  
  // –ü—Ä–∏–º–µ—Ä Mock –¥–∞–Ω–Ω—ã—Ö
  return [
    {
      type: 'birthday',
      name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
      date: '2025-08-17',
      phone: '+7 777 123 4567',
      notes: '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è'
    }
  ];
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 */
async function formatDailyNotification(events, localInfo) {
  const today = new Date().toLocaleDateString('ru-RU');
  
  let message = `üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (${today})</b>\n\n`;
  
  for (const event of events) {
    message += `üéÇ <b>${event.name}</b>\n`;
    message += `üìû ${event.phone}\n`;
    if (event.notes) {
      message += `üí¨ ${event.notes}\n`;
    }
    message += '\n';
  }
  
  message += `‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${localInfo}\n`;
  message += `ü§ñ EventGREEN Bot`;
  
  return message;
}

// –ü—Ä–∏–º–µ—Ä wrangler.toml –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:
/*
name = "eventgreen-notifications"
compatibility_date = "2023-10-30"

[env.production.vars]
TELEGRAM_BOT_TOKEN = "your_bot_token_here"

[[triggers.crons]]
cron = "53 09 * * *"

[[triggers.crons]] 
cron = "55 09 * * *"
*/