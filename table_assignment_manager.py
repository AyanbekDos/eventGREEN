#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
–†–∞–±–æ—Ç–∞–µ—Ç —Å –∑–∞—Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ 37 —Ç–∞–±–ª–∏—Ü–∞–º–∏
"""

import os
from datetime import datetime, timedelta
from typing import Optional
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from dotenv import load_dotenv
from dataclasses import dataclass

load_dotenv()

@dataclass
class AvailableTable:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
    telegram_id: str  # –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –∏–ª–∏ –∑–∞–≥–ª—É—à–∫–∞
    username: str     # –≤—Ä–µ–º–µ–Ω–Ω—ã–π username
    sheet_url: str    # URL —Ç–∞–±–ª–∏—Ü—ã
    status: str       # 'available' –∏–ª–∏ 'assigned'
    expires_at: str   # –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è
    created_at: str   # –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è

class TableAssignmentManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü –∏–∑ –≥–æ—Ç–æ–≤–æ–≥–æ –ø—É–ª–∞"""
    
    def __init__(self, service_account_path: str = 'service.json'):
        self.service_account_path = service_account_path
        self.master_sheet_id = os.getenv('MASTER_SHEET_ID')
        self._init_services()
    
    def _init_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å—ã Google API"""
        try:
            credentials = service_account.Credentials.from_service_account_file(
                self.service_account_path,
                scopes=[
                    'https://www.googleapis.com/auth/spreadsheets',
                    'https://www.googleapis.com/auth/drive'
                ]
            )
            
            self.sheets_service = build('sheets', 'v4', credentials=credentials)
            print("‚úÖ Google API —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google API: {e}")
            raise
    
    def get_available_table(self) -> Optional[AvailableTable]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏–∑ –ø—É–ª–∞
        
        Returns:
            AvailableTable –æ–±—ä–µ–∫—Ç –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        """
        try:
            if not self.master_sheet_id:
                print("‚ùå MASTER_SHEET_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return None
            
            # –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∞—Å—Ç–µ—Ä-—Ç–∞–±–ª–∏—Ü—ã
            result = self.sheets_service.spreadsheets().values().get(
                spreadsheetId=self.master_sheet_id,
                range='A:F'
            ).execute()
            
            values = result.get('values', [])
            
            if not values:
                print("‚ùå –ú–∞—Å—Ç–µ—Ä-—Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞")
                return None
            
            # –ò—â–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Ç–∞–±–ª–∏—Ü—É (–ø—É—Å—Ç–æ–π telegram_id –∏–ª–∏ TABLE_XX)
            for i, row in enumerate(values[1:], start=2):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if len(row) >= 3 and row[2].startswith('https://'):  # –ï—Å—Ç—å URL —Ç–∞–±–ª–∏—Ü—ã
                    telegram_id = row[0] if len(row) > 0 else ''
                    
                    # –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –µ—Å–ª–∏:
                    # 1. telegram_id –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å TABLE_
                    # 2. –ò–ª–∏ —Å—Ç–∞—Ç—É—Å 'available' 
                    is_available = (
                        not telegram_id or 
                        telegram_id.startswith('TABLE_') or
                        (len(row) > 3 and row[3] and row[3].lower() == 'available')
                    )
                    
                    if is_available:
                        return AvailableTable(
                            telegram_id=telegram_id,
                            username=row[1] if len(row) > 1 else '',
                            sheet_url=row[2],
                            status=row[3] if len(row) > 3 else '',
                            expires_at=row[4] if len(row) > 4 else '',
                            created_at=row[5] if len(row) > 5 else ''
                        ), i  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∞–∫–∂–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
            
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü")
            return None, None
            
        except HttpError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä-—Ç–∞–±–ª–∏—Ü—ã: {e}")
            return None, None
    
    def assign_table_to_user(self, telegram_id: str, username: str) -> Optional[str]:
        """
        –ù–∞–∑–Ω–∞—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            username: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            
        Returns:
            URL –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            print(f"üîç –ò—â—É –¥–æ—Å—Ç—É–ø–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è {username} ({telegram_id})...")
            
            # –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            table_info = self.get_available_table()
            if not table_info or len(table_info) != 2:
                print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ –ø—É–ª–µ")
                return None
            
            available_table, row_number = table_info
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Ç–µ—Ä-—Ç–∞–±–ª–∏—Ü–µ
            current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            expires_at = (datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d %H:%M:%S')
            
            updated_row = [
                telegram_id,              # –Ω–æ–≤—ã–π telegram_id
                username,                 # –Ω–æ–≤—ã–π username
                available_table.sheet_url, # —Ç–æ—Ç –∂–µ URL —Ç–∞–±–ª–∏—Ü—ã
                'trial',                  # —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                expires_at,               # –Ω–æ–≤–∞—è –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è
                current_time              # –¥–∞—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            ]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
            range_name = f'A{row_number}:F{row_number}'
            self.sheets_service.spreadsheets().values().update(
                spreadsheetId=self.master_sheet_id,
                range=range_name,
                valueInputOption='USER_ENTERED',
                body={'values': [updated_row]}
            ).execute()
            
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")
            print(f"üîó URL: {available_table.sheet_url}")
            print(f"üìÖ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ: {expires_at}")
            
            return available_table.sheet_url
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return None
    
    def count_available_tables(self) -> int:
        """
        –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        """
        try:
            result = self.sheets_service.spreadsheets().values().get(
                spreadsheetId=self.master_sheet_id,
                range='A:F'
            ).execute()
            
            values = result.get('values', [])
            count = 0
            
            for row in values[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if len(row) >= 3 and row[2].startswith('https://'):  # –ï—Å—Ç—å URL —Ç–∞–±–ª–∏—Ü—ã
                    telegram_id = row[0] if len(row) > 0 else ''
                    
                    # –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –µ—Å–ª–∏:
                    # 1. telegram_id –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å TABLE_
                    # 2. –ò–ª–∏ —Å—Ç–∞—Ç—É—Å 'available'
                    is_available = (
                        not telegram_id or 
                        telegram_id.startswith('TABLE_') or
                        (len(row) > 3 and row[3] and row[3].lower() == 'available')
                    )
                    
                    if is_available:
                        count += 1
            
            return count
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–∞–±–ª–∏—Ü: {e}")
            return 0
    
    def get_user_table_url(self, telegram_id: str) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç URL —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            
        Returns:
            URL —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            result = self.sheets_service.spreadsheets().values().get(
                spreadsheetId=self.master_sheet_id,
                range='A:F'
            ).execute()
            
            values = result.get('values', [])
            
            for row in values[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if len(row) >= 3 and row[0] == telegram_id:
                    return row[2]  # sheet_url
            
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢: Table Assignment Manager")
    print("=" * 50)
    
    try:
        manager = TableAssignmentManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        available_count = manager.count_available_tables()
        print(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {available_count}")
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ —á—Ç–æ–±—ã –Ω–µ –∏—Å–ø–æ—Ä—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ)
        # test_url = manager.assign_table_to_user("TEST_USER_123", "TestUser")
        # if test_url:
        #     print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞: {test_url}")
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")