#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ —Å —Å–æ–±—ã—Ç–∏—è–º–∏, —Ç–∞–∫ –∏ –±–µ–∑ –Ω–∏—Ö
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from datetime import datetime
import asyncio
from bot import EventGREENBot
from google_sheets_manager import GoogleSheetsManager
from dataclasses import dataclass
from typing import List, Optional


@dataclass
class MockEvent:
    """–ú–æ–∫ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    name: str
    phone: str
    event_type: str
    event_date: str
    note: str


@dataclass 
class MockUser:
    """–ú–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    telegram_id: str
    username: str
    status: str
    sheet_url: str


class MockSheetsManager:
    """–ú–æ–∫ Google Sheets Manager –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, mock_events: List[MockEvent] = None):
        self.mock_events = mock_events or []
    
    def get_all_trial_and_pro_users(self) -> List[MockUser]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return [
            MockUser(
                telegram_id="123456789",
                username="test_user_1", 
                status="trial",
                sheet_url="https://docs.google.com/test1"
            ),
            MockUser(
                telegram_id="987654321",
                username="test_user_2",
                status="pro", 
                sheet_url="https://docs.google.com/test2"
            )
        ]
    
    def get_today_events(self, user: MockUser) -> List[MockEvent]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.mock_events
    
    def get_congratulations_map(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç—É –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π"""
        return {
            "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è": "üéÇ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –î–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ñ–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è –∏ —É—Å–ø–µ—Ö–æ–≤!",
            "—Å–≤–∞–¥—å–±–∞": "üíç –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å–æ —Å–≤–∞–¥—å–±–æ–π! –ñ–µ–ª–∞–µ–º –∫—Ä–µ–ø–∫–æ–π —Å–µ–º—å–∏ –∏ –≤–µ—á–Ω–æ–π –ª—é–±–≤–∏!",
            "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ": "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º!"
        }


class MockBot:
    """–ú–æ–∫ Telegram –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.sent_messages = []
    
    async def send_message(self, chat_id: int, text: str, parse_mode=None, disable_web_page_preview=None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        message = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': parse_mode
        }
        self.sent_messages.append(message)
        print(f"üì§ MOCK: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}")
        print(f"üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{text}")
        print("-" * 50)


class MockApplication:
    """–ú–æ–∫ Telegram Application"""
    
    def __init__(self):
        self.bot = MockBot()


async def test_notifications_with_events():
    """–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —Å–æ–±—ã—Ç–∏—è–º–∏"""
    print("üß™ –¢–ï–°–¢: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Å–æ–±—ã—Ç–∏—è–º–∏")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–±—ã—Ç–∏—è
    mock_events = [
        MockEvent(
            name="–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
            phone="+7 777 123 45 67", 
            event_type="–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
            event_date="31.08",
            note="–í–∞–∂–Ω—ã–π –∫–ª–∏–µ–Ω—Ç"
        ),
        MockEvent(
            name="–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞", 
            phone="+7 777 987 65 43",
            event_type="—Å–≤–∞–¥—å–±–∞",
            event_date="31.08",
            note="–ù–æ–≤–∞—è –∫–ª–∏–µ–Ω—Ç–∫–∞"
        )
    ]
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä —Å —Å–æ–±—ã—Ç–∏—è–º–∏
    mock_sheets = MockSheetsManager(mock_events)
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç —Å –º–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    bot = EventGREENBot()
    bot.sheets_manager = mock_sheets
    bot.application = MockApplication()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await bot.send_daily_notifications()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    sent_messages = bot.application.bot.sent_messages
    print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(sent_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    for msg in sent_messages:
        assert "–°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è" in msg['text']
        assert "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤" in msg['text']
        assert "–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞" in msg['text']
        assert "–í—Å–µ–≥–æ: 2 —Å–æ–±—ã—Ç–∏–π" in msg['text']
    
    print("‚úÖ –¢–µ—Å—Ç —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –ü–†–û–ô–î–ï–ù")
    return True


async def test_notifications_without_events():
    """–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–µ–∑ —Å–æ–±—ã—Ç–∏–π"""
    print("\nüß™ –¢–ï–°–¢: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–µ–∑ —Å–æ–±—ã—Ç–∏–π")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä –ë–ï–ó —Å–æ–±—ã—Ç–∏–π
    mock_sheets = MockSheetsManager([])  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç —Å –º–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    bot = EventGREENBot()
    bot.sheets_manager = mock_sheets
    bot.application = MockApplication()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await bot.send_daily_notifications()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    sent_messages = bot.application.bot.sent_messages
    print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(sent_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    for msg in sent_messages:
        assert "–°–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –Ω–µ—Ç" in msg['text']
        assert "–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤" in msg['text']
        assert "–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã" in msg['text']
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ù–ï–¢ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏—è—Ö
        assert "–°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è" not in msg['text']
        assert "–í—Å–µ–≥–æ:" not in msg['text']
    
    print("‚úÖ –¢–µ—Å—Ç –±–µ–∑ —Å–æ–±—ã—Ç–∏–π –ü–†–û–ô–î–ï–ù")
    return True


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ï–ñ–ï–î–ù–ï–í–ù–´–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    print("=" * 60)
    
    try:
        # –¢–µ—Å—Ç —Å —Å–æ–±—ã—Ç–∏—è–º–∏
        await test_notifications_with_events()
        
        # –¢–µ—Å—Ç –±–µ–∑ —Å–æ–±—ã—Ç–∏–π  
        await test_notifications_without_events()
        
        print("\n" + "=" * 60)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üìã –¢–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –í–°–ï–ì–î–ê:")
        print("   ‚Ä¢ –° —Å–æ–±—ã—Ç–∏—è–º–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π")
        print("   ‚Ä¢ –ë–µ–∑ —Å–æ–±—ã—Ç–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    result = asyncio.run(main())
    
    if result:
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        exit(0)
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        exit(1)