#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ EventGREEN Bot —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import os
import asyncio
import tempfile
import threading
import schedule
import time
import pytz
from datetime import datetime, timezone
from typing import Dict, Any, Optional
from loguru import logger

# –ò–º–ø–æ—Ä—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
from notification_adapter import create_notification_adapter, NotificationAdapter, NotificationUser

from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)
from telegram.constants import ParseMode
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from table_assignment_manager import TableAssignmentManager
from vcf_normalizer_simple import SimpleVCFNormalizer
from ai_event_filter import AIEventFilter
from google_sheets_manager import GoogleSheetsManager, ClientEvent

load_dotenv()

class EventGREENBot:
    """EventGREEN Bot —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å–∏—Å—Ç–µ–º—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü"""
    
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.gemini_api_key = os.getenv('GEMINI_API_KEY')
        self.admin_id = int(os.getenv('ADMIN_TELEGRAM_ID', 0)) or None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.table_manager = TableAssignmentManager()
        self.vcf_normalizer = SimpleVCFNormalizer()
        self.ai_filter = AIEventFilter(self.gemini_api_key)
        self.sheets_manager = GoogleSheetsManager()
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫)
        self.notification_adapter = create_notification_adapter(
            user_loader=self._load_notification_users,
            notification_sender=self._send_notifications_async
        )
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_states = {}
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∏–∑–æ–ª—è—Ü–∏–µ–π HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        from telegram.request import HTTPXRequest
        
        self.application = (
            Application.builder()
            .token(self.bot_token)
            .concurrent_updates(True)  # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            .request(HTTPXRequest(
                connection_pool_size=8,  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                connect_timeout=15,
                read_timeout=15,
                write_timeout=15,
                pool_timeout=5  # –ë—ã—Å—Ç—Ä—ã–π —Ç–∞–π–º–∞—É—Ç
            ))
            .build()
        )
        self._setup_handlers()
    
    async def safe_reply(self, update: Update, text: str, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç event loop –æ—à–∏–±–æ–∫"""
        max_attempts = 3
        for attempt in range(max_attempts):
            try:
                await update.message.reply_text(text, **kwargs)
                return True
            except Exception as e:
                error_msg = str(e)
                if "Event loop is closed" in error_msg or "RuntimeError" in error_msg:
                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {error_msg}")
                    if attempt < max_attempts - 1:
                        await asyncio.sleep(0.5)
                        continue
                    else:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
                        return False
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ event loop –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
                    raise e
        return False
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("menu", self.menu_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("import", self.import_command))
        self.application.add_handler(CommandHandler("today", self.today_command))
        self.application.add_handler(CommandHandler("potential_clients", self.potential_clients_command))
        self.application.add_handler(CommandHandler("potential_revenue", self.potential_revenue_command))
        self.application.add_handler(CommandHandler("test_notifications", self.test_notifications_command))
        self.application.add_handler(CommandHandler("notifications", self.notifications_command))
        self.application.add_handler(CommandHandler("scheduler_status", self.scheduler_status_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.Document.ALL, self.handle_document))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logger.error(f"Exception while handling an update: {context.error}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if isinstance(update, Update) and update.effective_chat:
                error_message = (
                    "üö® <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
                    f"<code>{str(context.error)}</code>\n\n"
                    "üìß –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É –æ—à–∏–±–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @aianback"
                )
                
                try:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=error_message,
                        parse_mode=ParseMode.HTML
                    )
                except Exception as send_error:
                    logger.error(f"Failed to send error message: {send_error}")
                    
        except Exception as handler_error:
            logger.error(f"Error in error handler: {handler_error}")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        telegram_id = str(user.id)
        username = user.username or user.first_name
        
        print(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {telegram_id})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
        existing_user = self.sheets_manager.get_user_by_telegram_id(telegram_id)
        
        if existing_user:
            # –°—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ FREE –¥–æ—Å—Ç—É–ø–∞
            from datetime import datetime
            try:
                expires_date = datetime.strptime(existing_user.expires_at, '%Y-%m-%d %H:%M:%S')
                days_left = (expires_date - datetime.now()).days
                days_left = max(0, days_left)  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏
            except:
                days_left = 0
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å
            if existing_user.status == 'trial':
                welcome_message = f"""
üéâ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!

üÜì FREE –¥–æ—Å—Ç—É–ø: {days_left} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π.
"""
            else:
                welcome_message = f"""
üéâ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!

üíé PRO —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–µ–Ω

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π.
"""
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            assigned_url = self.table_manager.assign_table_to_user(telegram_id, username)
            
            if assigned_url:
                welcome_message = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EventGREEN Bot, {user.first_name}!

üÜì FREE –¥–æ—Å—Ç—É–ø: 30 –¥–Ω–µ–π

üöÄ –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ üì• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å VCF —Ñ–∞–π–ª—ã —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
‚Ä¢ ü§ñ –ù–∞—Ö–æ–¥–∏—Ç—å —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ AI
‚Ä¢ üìä –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ —Å–æ–±—ã—Ç–∏—è—Ö

–û—Ç–ø—Ä–∞–≤—å—Ç–µ VCF —Ñ–∞–π–ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu
"""
            else:
                welcome_message = f"""
üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, {user.first_name}!

‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
"""
        
        keyboard = self._get_main_keyboard()
        
        await update.message.reply_text(
            welcome_message,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
    
    async def menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        menu_text = """
üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é EventGREEN Bot</b>

üóì <b>–°–µ–≥–æ–¥–Ω—è</b> - –°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
üì• <b>–ò–º–ø–æ—Ä—Ç VCF</b> - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤  
üí° <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã</b> - –ë–∞–∑–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
üí∞ <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥</b> - –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏

/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
"""
        
        keyboard = self._get_main_keyboard()
        await update.message.reply_text(
            menu_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    
    async def import_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –∏–º–ø–æ—Ä—Ç–∞ VCF"""
        user_id = str(update.effective_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
        user = self.sheets_manager.get_user_by_telegram_id(user_id)
        if not user:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ"
            )
            return
        
        self.user_states[user_id] = "waiting_vcf"
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_import")]
        ])
        
        await update.message.reply_text(
            "üì• <b>–ò–º–ø–æ—Ä—Ç VCF —Ñ–∞–π–ª–∞</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ VCF —Ñ–∞–π–ª —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏.\n"
            "–§–∞–π–ª –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω AI –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π.\n\n"
            "<i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë</i>",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    
    async def today_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - thread-safe –≤–µ—Ä—Å–∏—è"""
        try:
            user_id = str(update.effective_user.id)
            
            # –†–ê–î–ò–ö–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï: –í—ã–ø–æ–ª–Ω—è–µ–º –í–°–Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            import concurrent.futures
            
            def execute_sheets_operations():
                """–í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å Google Sheets –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user = self.sheets_manager.get_user_by_telegram_id(user_id)
                    if not user:
                        return {"error": "user_not_found"}
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
                    today_events = self.sheets_manager.get_today_events(user)
                    if not today_events:
                        return {"error": "no_events"}
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
                    congratulations_map = self.sheets_manager.get_congratulations_map()
                    
                    return {
                        "success": True,
                        "events": today_events,
                        "congratulations": congratulations_map
                    }
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ execute_sheets_operations: {e}")
                    return {"error": f"sheets_error: {e}"}
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ executor'–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–∑–æ–ª—è—Ü–∏–∏
            loop = asyncio.get_event_loop()
            with concurrent.futures.ThreadPoolExecutor(max_workers=1) as executor:
                result = await loop.run_in_executor(executor, execute_sheets_operations)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if "error" in result:
                if result["error"] == "user_not_found":
                    await self.safe_reply(
                        update,
                        "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ"
                    )
                elif result["error"] == "no_events":
                    await self.safe_reply(
                        update,
                        "üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ VCF —Ñ–∞–π–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π."
                    )
                else:
                    await self.safe_reply(
                        update,
                        "‚ùå –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
                    )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            today_events = result["events"]
            congratulations_map = result["congratulations"]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–æ–π
            from datetime import datetime
            today_date = datetime.now()
            weekdays = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
            weekday = weekdays[today_date.weekday()]
            date_str = today_date.strftime('%d.%m.%Y')
            
            response = f"üéâ <b>–°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, {weekday}, {date_str}:</b>\n\n"
            response += "üí° <i>–ö–ª–∏–∫–∞–π—Ç–µ –Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</i>\n\n"
            
            for i, event in enumerate(today_events, 1):
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–ª—è–º–∏
                name = event.name if event.name and event.name.strip() else "NULL"
                phone = event.phone if event.phone and event.phone.strip() else "NULL"
                event_type = event.event_type if event.event_type and event.event_type.strip() and event.event_type.lower() != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" else "NULL"
                note = event.note if event.note and event.note.strip() else "NULL"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —è–≤–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
                response += f"{i}. üë§ <b>{name}</b> üìû <code>üìã {phone}</code> üéâ {event_type} üìù {note}\n"
                
                # –ì–æ—Ç–æ–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                event_type_lower = event.event_type.lower() if event.event_type and event.event_type.strip() else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                congratulation = congratulations_map.get(event_type_lower, congratulations_map.get("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º! –ñ–µ–ª–∞–µ–º —Ä–∞–¥–æ—Å—Ç–∏ –∏ —Å—á–∞—Å—Ç—å—è! ‚ú®"))
                
                response += f"<blockquote>{congratulation}</blockquote>\n"
            
            response += f"\n<b>–í—Å–µ–≥–æ: {len(today_events)} —Å–æ–±—ã—Ç–∏–π</b>"
            
            await self.safe_reply(
                update,
                response,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ today_command: {e}")
            await self.safe_reply(
                update,
                "üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π.\n"
                "üìß –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @aianback"
            )
    
    async def potential_revenue_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞"""
        user_id = str(update.effective_user.id)
        
        user = self.sheets_manager.get_user_by_telegram_id(user_id)
        
        if not user:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ"
            )
            return
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è PRO —Ñ—É–Ω–∫—Ü–∏–∏
        revenue_text = f"""
üí∞ <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥</b>

üîí <b>–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ PRO –≤–µ—Ä—Å–∏–∏</b>

–í PRO –≤–µ—Ä—Å–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:
‚Ä¢ üìà –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
‚Ä¢ üíµ –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
‚Ä¢ üì± –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂

üíé –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ!
"""
        
        await update.message.reply_text(
            revenue_text,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
    
    async def potential_clients_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        user_id = str(update.effective_user.id)
        
        user = self.sheets_manager.get_user_by_telegram_id(user_id)
        
        if not user:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ"
            )
            return
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è PRO —Ñ—É–Ω–∫—Ü–∏–∏
        clients_text = f"""
üí° <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã</b>

üîí <b>–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ PRO –≤–µ—Ä—Å–∏–∏</b>

<b>–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã?</b>
–≠—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ AI –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –Ω–æ —Å –Ω–µ—Ç–æ—á–Ω–æ–π –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–±—ã—Ç–∏—è—Ö.

–í PRO –≤–µ—Ä—Å–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:
‚Ä¢ üë• –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ ‚úèÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ üéâ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
‚Ä¢ üìä –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π

üíé –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º!
"""
        
        await update.message.reply_text(
            clients_text,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
        help_text = """
üÜò <b>–°–ø—Ä–∞–≤–∫–∞ EventGREEN Bot</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/import - –ó–∞–≥—Ä—É–∑–∏—Ç—å VCF —Ñ–∞–π–ª
/today - –°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/notifications - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1Ô∏è‚É£ –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ VCF —Ñ–∞–π–ª —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
3Ô∏è‚É£ AI –Ω–∞–π–¥–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞:
   ‚Ä¢ ‚úÖ –ò–¥–µ–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã (—Å –¥–∞—Ç–∞–º–∏ —Å–æ–±—ã—Ç–∏–π)
   ‚Ä¢ üí° –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã (–Ω–µ—Ç–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
4Ô∏è‚É£ –ü–æ–ª—É—á–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å–æ–±—ã—Ç–∏–π:</b>
‚Ä¢ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è, —é–±–∏–ª–µ–∏
‚Ä¢ –°–≤–∞–¥—å–±—ã, —Ç–æ—Ä–∂–µ—Å—Ç–≤–∞  
‚Ä¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤—ã, –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
‚Ä¢ –ò –¥—Ä—É–≥–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è

<b>–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: @aianback

<i>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞</i>
"""
        
        await update.message.reply_text(
            help_text,
            parse_mode=ParseMode.HTML
        )
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        user_id = str(update.effective_user.id)
        document = update.message.document
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ VCF —Ñ–∞–π–ª
        if self.user_states.get(user_id) != "waiting_vcf":
            await update.message.reply_text(
                "üìé –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ VCF —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /import"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not document.file_name.lower().endswith('.vcf'):
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .vcf"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–ª–∏–º–∏—Ç 20MB)
        if document.file_size > 20 * 1024 * 1024:
            await update.message.reply_text(
                "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë"
            )
            return
        
        # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        self.user_states.pop(user_id, None)
        
        await self.process_vcf_file(update, context, document)
    
    async def process_vcf_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE, document):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ VCF —Ñ–∞–π–ª–∞"""
        user = update.effective_user
        user_id = str(user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        db_user = self.sheets_manager.get_user_by_telegram_id(user_id)
        if not db_user:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start"
            )
            return
        
        try:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            progress_message = await update.message.reply_text(
                "üì• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é VCF —Ñ–∞–π–ª...\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
            )
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(document.file_id)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.vcf', delete=False) as temp_file:
                await file.download_to_drive(temp_file.name)
                
                # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                with open(temp_file.name, 'r', encoding='utf-8') as f:
                    vcf_content = f.read()
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(temp_file.name)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º VCF
            await progress_message.edit_text(
                "üîç –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...\n‚è≥ –ò–∑–≤–ª–µ–∫–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ VCF"
            )
            
            # VCF –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ {combined_text, phone}
            contacts = self.vcf_normalizer.normalize_vcf(vcf_content)
            
            if not contacts:
                await progress_message.edit_text(
                    "‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
                )
                return
            
            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ —á—Ç–æ –±—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–∞—Ç—á–∞–º–∏
            await progress_message.edit_text(
                f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(contacts)}\n"
                f"ü§ñ –ù–∞—á–∏–Ω–∞—é AI –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞—Ç—á–∞–º–∏...\n"
                f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
            )
            
            # AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï –∫–æ–Ω—Ç–∞–∫—Ç—ã (–ø–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–µ JSON –æ–±—ä–µ–∫—Ç—ã –∫–∞–∫ –≤ –ø—Ä–æ–º–ø—Ç–µ)
            ai_results = await self.ai_filter.filter_events_from_contacts(contacts)
            
            if not ai_results:
                await progress_message.edit_text(
                    "‚ùå AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å –¥—Ä—É–≥–∏–º —Ñ–∞–π–ª–æ–º."
                )
                return
            
            # AI –≤–µ—Ä–Ω—É–ª –≥–æ—Ç–æ–≤—ã–µ ExtractedContact –æ–±—ä–µ–∫—Ç—ã —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏
            ideal_clients_data = []
            potential_clients_data = []
            
            for ai_contact in ai_results:
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è Google Sheets
                contact_dict = {
                    'name': ai_contact.name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    'phone': ai_contact.phone,  # –¢–µ–ª–µ—Ñ–æ–Ω —É–∂–µ –µ—Å—Ç—å –æ—Ç AI
                    'event_type': ai_contact.event_type or '–°–æ–±—ã—Ç–∏–µ',
                    'event_date': ai_contact.event_date,
                    'note': ai_contact.note or ''
                }
                
                # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –Ω–∞–ª–∏—á–∏—é –¥–∞—Ç—ã
                if ai_contact.event_date and ai_contact.event_date.strip():
                    ideal_clients_data.append(contact_dict)
                else:
                    potential_clients_data.append(contact_dict)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ ClientEvent –æ–±—ä–µ–∫—Ç—ã
            ideal_events = []
            for client in ideal_clients_data:
                ideal_events.append(ClientEvent(
                    name=client.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    phone=client.get('phone', ''),
                    event_type=client.get('event_type', '–°–æ–±—ã—Ç–∏–µ'),
                    event_date=client.get('event_date', ''),
                    note=client.get('note', '')
                ))
            
            potential_events = []
            for client in potential_clients_data:
                potential_events.append(ClientEvent(
                    name=client.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    phone=client.get('phone', ''),
                    event_type=client.get('event_type', '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å'),
                    event_date=None,
                    note=client.get('note', '')
                ))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
            await progress_message.edit_text(
                f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü—É...\n"
                f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(ideal_events)} –∏–¥–µ–∞–ª—å–Ω—ã—Ö + {len(potential_events)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"
            )
            
            success = self.sheets_manager.add_clients_to_user_sheet(
                db_user, ideal_events, potential_events
            )
            
            if success:
                # –£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                result_text = f"""
‚úÖ <b>VCF —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>

üìä <b>–ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>
‚Ä¢ –í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ VCF: {len(contacts)}
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ AI –±–∞—Ç—á–∞–º–∏: {len(contacts)}
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(ai_results)}
‚Ä¢ ‚ú® –ò–¥–µ–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã (—Å –¥–∞—Ç–∞–º–∏): {len(ideal_events)}
‚Ä¢ üí° –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {len(potential_events)}

üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /today –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
"""
                
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üóì –°–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è", callback_data="show_today")]
                ])
                
                await progress_message.edit_text(
                    result_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.HTML,
                    disable_web_page_preview=True
                )
            else:
                await progress_message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ VCF: {e}")
            await progress_message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)[:200]}...\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text.lower()
        
        if "—Å–µ–≥–æ–¥–Ω—è" in text:
            await self.today_command(update, context)
        elif "–∏–º–ø–æ—Ä—Ç" in text or "–∑–∞–≥—Ä—É–∑–∏—Ç—å" in text:
            await self.import_command(update, context)
        elif "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã" in text:
            await self.potential_clients_command(update, context)
        elif "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥" in text:
            await self.potential_revenue_command(update, context)
        elif "–ø–æ–º–æ—â—å" in text or "—Å–ø—Ä–∞–≤–∫–∞" in text:
            await self.help_command(update, context)
        else:
            await update.message.reply_text(
                "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥."
            )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_id = str(query.from_user.id)
        data = query.data
        
        if data == "cancel_import":
            self.user_states.pop(user_id, None)
            await query.edit_message_text("‚ùå –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
        
        elif data == "show_today":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            user = self.sheets_manager.get_user_by_telegram_id(user_id)
            if user:
                today_events = self.sheets_manager.get_today_events(user)
                
                if not today_events:
                    await query.edit_message_text("üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ñ–æ—Ä–º–∞—Ç —á—Ç–æ –∏ –≤ –∫–æ–º–∞–Ω–¥–µ today
                    from datetime import datetime
                    today_date = datetime.now()
                    weekdays = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
                    weekday = weekdays[today_date.weekday()]
                    date_str = today_date.strftime('%d.%m.%Y')
                    
                    congratulations_map = self.sheets_manager.get_congratulations_map()
                    
                    response = f"üéâ <b>–°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, {weekday}, {date_str}:</b>\n\n"
                    response += "üí° <i>–ö–ª–∏–∫–∞–π—Ç–µ –Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</i>\n\n"
                    
                    for i, event in enumerate(today_events, 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï —Å–æ–±—ã—Ç–∏—è
                        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–ª—è–º–∏
                        name = event.name if event.name and event.name.strip() else "NULL"
                        phone = event.phone if event.phone and event.phone.strip() else "NULL"
                        event_type = event.event_type if event.event_type and event.event_type.strip() and event.event_type.lower() != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" else "NULL"
                        note = event.note if event.note and event.note.strip() else "NULL"
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —è–≤–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
                        response += f"{i}. üë§ <b>{name}</b> üìû <code>üìã {phone}</code> üéâ {event_type} üìù {note}\n"
                        
                        # –ì–æ—Ç–æ–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                        event_type_lower = event.event_type.lower() if event.event_type and event.event_type.strip() else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        congratulation = congratulations_map.get(event_type_lower, congratulations_map.get("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º! –ñ–µ–ª–∞–µ–º —Ä–∞–¥–æ—Å—Ç–∏ –∏ —Å—á–∞—Å—Ç—å—è! ‚ú®"))
                        
                        response += f"<blockquote>{congratulation}</blockquote>\n"
                    
                    response += f"\n<b>–í—Å–µ–≥–æ: {len(today_events)} —Å–æ–±—ã—Ç–∏–π</b>"
                    
                    await query.edit_message_text(response, parse_mode=ParseMode.HTML)
    
    async def test_notifications_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        user_id = str(update.effective_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω (–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π ID)
        if self.admin_id and int(user_id) != self.admin_id:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            return
        
        await update.message.reply_text("üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        
        try:
            await self.send_daily_notifications()
            await update.message.reply_text("‚úÖ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
    
    async def notifications_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        user_id = str(update.effective_user.id)
        
        user = self.sheets_manager.get_user_by_telegram_id(user_id)
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        if context.args:
            if len(context.args) == 2:
                new_time = context.args[0]
                new_timezone = context.args[1]
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                try:
                    datetime.strptime(new_time, "%H:%M")
                except ValueError:
                    await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20:15)")
                    return
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
                try:
                    pytz.timezone(new_timezone)
                except pytz.UnknownTimeZoneError:
                    await update.message.reply_text(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: {new_timezone}\n\n"
                                                   f"–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∑–æ–Ω:\n"
                                                   f"‚Ä¢ Asia/Almaty\n"
                                                   f"‚Ä¢ Europe/Moscow\n"
                                                   f"‚Ä¢ Asia/Tashkent\n"
                                                   f"‚Ä¢ Asia/Bishkek")
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ Google Sheets
                try:
                    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
                    result = self.sheets_manager.sheets_service.spreadsheets().values().get(
                        spreadsheetId=self.sheets_manager.master_sheet_id,
                        range='A:H'
                    ).execute()
                    
                    values = result.get('values', [])
                    row_number = None
                    
                    for i, row in enumerate(values[1:], start=2):  # –Ω–∞—á–∏–Ω–∞–µ–º —Å 2, —Ç.–∫. –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                        if len(row) >= 1 and row[0] == user_id:
                            row_number = i
                            break
                    
                    if row_number:
                        # –û–±–Ω–æ–≤–ª—è–µ–º G –∏ H –∫–æ–ª–æ–Ω–∫–∏
                        self.sheets_manager.sheets_service.spreadsheets().values().update(
                            spreadsheetId=self.sheets_manager.master_sheet_id,
                            range=f'G{row_number}:H{row_number}',
                            valueInputOption='USER_ENTERED',
                            body={'values': [[new_time, new_timezone]]}
                        ).execute()
                        
                        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                        self.notification_adapter.reload_scheduler()
                        
                        await update.message.reply_text(
                            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
                            f"üïê –í—Ä–µ–º—è: {new_time}\n"
                            f"üåç –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: {new_timezone}\n\n"
                            f"‚ö° –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω"
                        )
                    else:
                        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ")
                        
                except Exception as e:
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
                    
            elif len(context.args) == 1 and context.args[0].lower() == "disable":
                # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                try:
                    result = self.sheets_manager.sheets_service.spreadsheets().values().get(
                        spreadsheetId=self.sheets_manager.master_sheet_id,
                        range='A:H'
                    ).execute()
                    
                    values = result.get('values', [])
                    row_number = None
                    
                    for i, row in enumerate(values[1:], start=2):
                        if len(row) >= 1 and row[0] == user_id:
                            row_number = i
                            break
                    
                    if row_number:
                        self.sheets_manager.sheets_service.spreadsheets().values().update(
                            spreadsheetId=self.sheets_manager.master_sheet_id,
                            range=f'G{row_number}',
                            valueInputOption='USER_ENTERED',
                            body={'values': [['disabled']]}
                        ).execute()
                        
                        self.notification_adapter.reload_scheduler()
                        
                        await update.message.reply_text("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
                    else:
                        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ")
                        
                except Exception as e:
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}")
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "‚Ä¢ `/notifications 20:15 Asia/Almaty` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –∏ –∑–æ–Ω—É\n"
                    "‚Ä¢ `/notifications disable` - –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                )
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            current_time = user.notification_time if hasattr(user, 'notification_time') else "20:15"
            current_timezone = user.timezone if hasattr(user, 'timezone') else "Asia/Almaty"
            
            if current_time == "disabled":
                status = "üî¥ –û—Ç–∫–ª—é—á–µ–Ω—ã"
            else:
                status = f"üü¢ –í–∫–ª—é—á–µ–Ω—ã"
            
            await update.message.reply_text(
                f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                f"üïê –í—Ä–µ–º—è: {current_time}\n"
                f"üåç –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: {current_timezone}\n\n"
                f"<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                f"‚Ä¢ <code>/notifications 20:15 Asia/Almaty</code> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è\n"
                f"‚Ä¢ <code>/notifications disable</code> - –æ—Ç–∫–ª—é—á–∏—Ç—å\n\n"
                f"<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã:</b>\n"
                f"‚Ä¢ Asia/Almaty (–ê–ª–º–∞—Ç—ã)\n"
                f"‚Ä¢ Europe/Moscow (–ú–æ—Å–∫–≤–∞)\n"
                f"‚Ä¢ Asia/Tashkent (–¢–∞—à–∫–µ–Ω—Ç)\n"
                f"‚Ä¢ Asia/Bishkek (–ë–∏—à–∫–µ–∫)",
                parse_mode=ParseMode.HTML
            )
    
    async def scheduler_status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        user_id = str(update.effective_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        if self.admin_id and int(user_id) != self.admin_id:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            return
        
        try:
            status = self.notification_adapter.get_status()
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            scheduler_type = self.notification_adapter.get_scheduler_type()
            
            response = f"üìä <b>–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
            response += f"üîß –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {scheduler_type}\n"
            response += f"üåç Workers-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π: {'‚úÖ' if self.notification_adapter.is_workers_compatible() else '‚ùå'}\n"
            response += f"üïê –¢–µ–∫—É—â–µ–µ UTC –≤—Ä–µ–º—è: {status.get('current_utc_time', 'N/A')}\n\n"
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if 'scheduled_notifications' in status:
                response += f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {status['scheduled_notifications']}\n"
            elif 'active_tasks' in status:
                response += f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {status['active_tasks']}\n"
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if status.get('notifications'):
                response += f"\n<b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
                for notif in status['notifications'][:5]:
                    response += f"üïê {notif['utc_time']} UTC - {notif['user_count']} –ø–æ–ª—å–∑.\n"
                    if 'cron_expression' in notif:
                        response += f"   üìÖ Cron: {notif['cron_expression']}\n"
            elif status.get('tasks'):
                response += f"\n<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>\n"
                for task in status['tasks'][:3]:
                    response += f"‚è∞ {task['target_time']} - {task['user_count']} –ø–æ–ª—å–∑.\n"
                    response += f"   ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {task['remaining_seconds']} —Å–µ–∫\n"
            else:
                response += "\n‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            
            await update.message.reply_text(response, parse_mode=ParseMode.HTML)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
    
    def _load_notification_users(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        users = self.sheets_manager.get_all_trial_and_pro_users()
        
        notification_users = []
        for user in users:
            notification_users.append(NotificationUser(
                telegram_id=user.telegram_id,
                username=user.username,
                notification_time=getattr(user, 'notification_time', '20:15'),
                timezone=getattr(user, 'timezone', 'Asia/Almaty'),
                status=user.status
            ))
        
        return notification_users
    
    def _send_notifications_async(self, user_ids):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
        try:
            print(f"üì§ –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –ù–ò–ö–û–ì–î–ê –Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ event loop'—ã –∏ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏—Ö!
            # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º thread-safe –ø–æ–¥—Ö–æ–¥
            def run_in_thread():
                """–ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º event loop"""
                try:
                    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π event loop —Ç–æ–ª—å–∫–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    new_loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(new_loop)
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
                    new_loop.run_until_complete(self._send_notifications_to_users_impl(user_ids))
                    
                finally:
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º loop —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–º –ø–æ—Ç–æ–∫–µ
                    try:
                        new_loop.close()
                    except:
                        pass
                    
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –≤–ª–∏—è—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π event loop
            import threading
            thread = threading.Thread(target=run_in_thread, daemon=True)
            thread.start()
            
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _send_notifications_async: {e}")
    
    async def _send_notifications_to_users_impl(self, user_ids: list):
        """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å retry –ª–æ–≥–∏–∫–æ–π –¥–ª—è SSL –æ—à–∏–±–æ–∫
            all_users = []
            max_retries = 3
            
            for attempt in range(max_retries):
                try:
                    all_users = self.sheets_manager.get_all_trial_and_pro_users()
                    break  # –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ
                except Exception as e:
                    print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                    if attempt < max_retries - 1:
                        print(f"üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...")
                        await asyncio.sleep(2)
                    else:
                        print("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
                        return  # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            
            if not all_users:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            target_users = [user for user in all_users if user.telegram_id in user_ids]
            
            for user in target_users:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å retry –ª–æ–≥–∏–∫–æ–π
                    today_events = None
                    max_event_retries = 3
                    
                    for attempt in range(max_event_retries):
                        try:
                            today_events = self.sheets_manager.get_today_events(user)
                            break  # –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–±—ã—Ç–∏—è
                        except Exception as e:
                            print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –¥–ª—è {user.username}: {e}")
                            if attempt < max_event_retries - 1:
                                print(f"üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...")
                                await asyncio.sleep(2)
                            else:
                                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–ª—è {user.username}")
                                today_events = []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å
                    
                    if today_events:
                        message = await self._format_daily_notification_async(today_events)
                        await self.application.bot.send_message(
                            chat_id=user.telegram_id,
                            text=message,
                            parse_mode=ParseMode.HTML
                        )
                        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username} ({len(today_events)} —Å–æ–±—ã—Ç–∏–π)")
                    else:
                        print(f"‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                    continue
            
            print(f"üìÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã ({len(target_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
            
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    async def _format_daily_notification_async(self, today_events: list) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å retry)"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å retry –ª–æ–≥–∏–∫–æ–π –¥–ª—è SSL –æ—à–∏–±–æ–∫
        congratulations_map = {}
        max_congrat_retries = 3
        
        for attempt in range(max_congrat_retries):
            try:
                congratulations_map = self.sheets_manager.get_congratulations_map()
                break  # –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
                if attempt < max_congrat_retries - 1:
                    print(f"üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...")
                    await asyncio.sleep(2)
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ")
                    congratulations_map = {}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–æ–π
        from datetime import datetime
        today_date = datetime.now()
        weekdays = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        weekday = weekdays[today_date.weekday()]
        date_str = today_date.strftime('%d.%m.%Y')
        
        response = f"üéâ <b>–°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, {weekday}, {date_str}:</b>\n\n"
        response += "üí° <i>–ö–ª–∏–∫–∞–π—Ç–µ –Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</i>\n\n"
        
        for i, event in enumerate(today_events, 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï —Å–æ–±—ã—Ç–∏—è
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–ª—è–º–∏
            name = event.name if event.name and event.name.strip() else "NULL"
            phone = event.phone if event.phone and event.phone.strip() else "NULL"
            event_type = event.event_type if event.event_type and event.event_type.strip() and event.event_type.lower() != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" else "NULL"
            note = event.note if event.note and event.note.strip() else "NULL"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —è–≤–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            response += f"{i}. üë§ <b>{name}</b> üìû <code>üìã {phone}</code> üéâ {event_type} üìù {note}\n"
            
            # –ì–æ—Ç–æ–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            event_type_lower = event.event_type.lower() if event.event_type and event.event_type.strip() else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            congratulation = congratulations_map.get(event_type_lower, congratulations_map.get("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º! –ñ–µ–ª–∞–µ–º —Ä–∞–¥–æ—Å—Ç–∏ –∏ —Å—á–∞—Å—Ç—å—è! ‚ú®"))
            
            response += f"<blockquote>{congratulation}</blockquote>\n"
        
        response += f"\n<b>–í—Å–µ–≥–æ: {len(today_events)} —Å–æ–±—ã—Ç–∏–π</b>"
        
        return response

    def _format_daily_notification(self, today_events: list) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
        congratulations_map = self.sheets_manager.get_congratulations_map()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–æ–π
        from datetime import datetime
        today_date = datetime.now()
        weekdays = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        weekday = weekdays[today_date.weekday()]
        date_str = today_date.strftime('%d.%m.%Y')
        
        response = f"üéâ <b>–°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, {weekday}, {date_str}:</b>\n\n"
        response += "üí° <i>–ö–ª–∏–∫–∞–π—Ç–µ –Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</i>\n\n"
        
        for i, event in enumerate(today_events, 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï —Å–æ–±—ã—Ç–∏—è
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–ª—è–º–∏
            name = event.name if event.name and event.name.strip() else "NULL"
            phone = event.phone if event.phone and event.phone.strip() else "NULL"
            event_type = event.event_type if event.event_type and event.event_type.strip() and event.event_type.lower() != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" else "NULL"
            note = event.note if event.note and event.note.strip() else "NULL"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —è–≤–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            response += f"{i}. üë§ <b>{name}</b> üìû <code>üìã {phone}</code> üéâ {event_type} üìù {note}\n"
            
            # –ì–æ—Ç–æ–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            event_type_lower = event.event_type.lower() if event.event_type and event.event_type.strip() else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            congratulation = congratulations_map.get(event_type_lower, congratulations_map.get("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º! –ñ–µ–ª–∞–µ–º —Ä–∞–¥–æ—Å—Ç–∏ –∏ —Å—á–∞—Å—Ç—å—è! ‚ú®"))
            
            response += f"<blockquote>{congratulation}</blockquote>\n"
        
        response += f"\n<b>–í—Å–µ–≥–æ: {len(today_events)} —Å–æ–±—ã—Ç–∏–π</b>"
        
        return response
    
    def _extract_name_from_combined_text(self, combined_text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –∏–∑ combined_text"""
        if not combined_text:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –∫–∞–∫ –∏–º—è (–¥–æ 3 —Å–ª–æ–≤)
        words = combined_text.split()
        if len(words) >= 2:
            return ' '.join(words[:2])  # –ü–µ—Ä–≤—ã–µ 2 —Å–ª–æ–≤–∞
        elif len(words) == 1:
            return words[0]
        else:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    def _get_main_keyboard(self):
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        keyboard = [
            [KeyboardButton("üóì –°–µ–≥–æ–¥–Ω—è"), KeyboardButton("üì• –ò–º–ø–æ—Ä—Ç VCF")],
            [KeyboardButton("üí° –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã"), KeyboardButton("üí∞ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥")],
            [KeyboardButton("‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"), KeyboardButton("üÜò –ü–æ–º–æ—â—å")]
        ]
        
        return ReplyKeyboardMarkup(
            keyboard,
            resize_keyboard=True,
            one_time_keyboard=False
        )
    
    def _get_event_emoji(self, event_type: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è"""
        if not event_type:
            return "üë§"
        
        event_lower = event_type.lower()
        
        # –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ —é–±–∏–ª–µ–∏
        if any(word in event_lower for word in ["–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "birthday", "—Ç—É“ì–∞–Ω –∫“Ø–Ω", "—é–±–∏–ª–µ–π"]):
            return "üéÇ"
        
        # –°–≤–∞–¥—å–±—ã
        if any(word in event_lower for word in ["—Å–≤–∞–¥—å–±–∞", "wedding", "—Ç–æ–π", "–∫—ã–∑ —É–∑–∞—Ç—É"]):
            return "üíç"
        
        # –î–µ—Ç—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
        if any(word in event_lower for word in ["—Ç—É—Å–∞—É –∫–µ—Å—É", "–∫—Ä–µ—â–µ–Ω–∏–µ", "baby shower"]):
            return "üë∂"
        
        # –í—ã–ø—É—Å–∫–Ω—ã–µ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        if any(word in event_lower for word in ["–≤—ã–ø—É—Å–∫–Ω–æ–π", "graduation", "—à–∫–æ–ª", "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"]):
            return "üéì"
        
        # –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        if any(word in event_lower for word in ["–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤", "—Ç–∏–º–±–∏–ª–¥–∏–Ω–≥", "retirement"]):
            return "üè¢"
        
        # –ü—Ä–∞–∑–¥–Ω–∏–∫–∏
        if any(word in event_lower for word in ["–Ω–∞—É—Ä—ã–∑", "–Ω–æ–≤—ã–π –≥–æ–¥", "8 –º–∞—Ä—Ç–∞", "23 —Ñ–µ–≤—Ä–∞–ª—è"]):
            return "üéä"
        
        # –ú–µ—Å—è—Ü—ã (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã)
        if any(word in event_lower for word in ["—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", 
                                               "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"]):
            return "üìÖ"
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return "üéâ"
    
    async def send_daily_notifications(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            print("üìÖ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –º–∞—Å—Ç–µ—Ä —Ç–∞–±–ª–∏—Ü—ã
            users = self.sheets_manager.get_all_trial_and_pro_users()
            
            for user in users:
                if not user.telegram_id or user.telegram_id == "":
                    continue
                    
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    today_events = self.sheets_manager.get_today_events(user)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π (–≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
                    from datetime import datetime
                    today_date = datetime.now()
                    weekdays = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
                    weekday = weekdays[today_date.weekday()]
                    date_str = today_date.strftime('%d.%m.%Y')
                    
                    message = "üåÖ <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!</b>\n\n"
                    
                    if today_events:
                        # –ï—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                        congratulations_map = self.sheets_manager.get_congratulations_map()
                        
                        message += f"üéâ <b>–°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, {weekday}, {date_str}:</b>\n\n"
                        message += "üí° <i>–ö–ª–∏–∫–∞–π—Ç–µ –Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</i>\n\n"
                        
                        for i, event in enumerate(today_events, 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï —Å–æ–±—ã—Ç–∏—è
                            # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–ª—è–º–∏
                            name = event.name if event.name and event.name.strip() else "NULL"
                            phone = event.phone if event.phone and event.phone.strip() else "NULL"
                            event_type = event.event_type if event.event_type and event.event_type.strip() and event.event_type.lower() != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" else "NULL"
                            note = event.note if event.note and event.note.strip() else "NULL"
                            
                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —è–≤–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
                            message += f"{i}. üë§ <b>{name}</b> üìû <code>üìã {phone}</code> üéâ {event_type} üìù {note}\n"
                            
                            # –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
                            event_type_lower = event.event_type.lower() if event.event_type and event.event_type.strip() else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                            congratulation = congratulations_map.get(event_type_lower, congratulations_map.get("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º!"))
                            message += f"<blockquote>{congratulation}</blockquote>\n"
                        
                        message += f"\n<b>–í—Å–µ–≥–æ: {len(today_events)} —Å–æ–±—ã—Ç–∏–π</b>\n\n"
                        message += "üìä –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –∏ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂! üí™"
                    else:
                        # –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                        message += f"üìÖ <b>–°–µ–≥–æ–¥–Ω—è, {weekday}, {date_str}</b>\n\n"
                        message += "üòå <b>–°–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –Ω–µ—Ç</b>\n\n"
                        message += "üîç –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤!\n"
                        message += "üíº –ú–æ–∂–µ—Ç–µ –∑–∞–Ω—è—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ –≤–∞–∂–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏ –∏–ª–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è.\n\n"
                        message += "üìä –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã! üí™"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–≤—Å–µ–≥–¥–∞)
                    await self.application.bot.send_message(
                        chat_id=int(user.telegram_id),
                        text=message,
                        parse_mode=ParseMode.HTML,
                        disable_web_page_preview=True
                    )
                    
                    if today_events:
                        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å {len(today_events)} —Å–æ–±—ã—Ç–∏—è–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                    else:
                        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ —Å–æ–±—ã—Ç–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                    continue
            
            print("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
            
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö: {e}")
    
    
    def _schedule_daily_notifications(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–¥–∞—á–∏
        schedule.clear()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        active_users = self.sheets_manager.get_all_trial_and_pro_users()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–æ–Ω)
        notification_groups = {}
        
        for user in active_users:
            if user.notification_time == "disabled":
                continue
                
            try:
                # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_time = datetime.strptime(user.notification_time, "%H:%M").time()
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
                user_tz = pytz.timezone(user.timezone)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                now_utc = datetime.now(pytz.UTC)
                
                # –°–æ–∑–¥–∞–µ–º datetime –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ
                today = now_utc.astimezone(user_tz).date()
                user_datetime_tz = user_tz.localize(datetime.combine(today, user_time))
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC –¥–ª—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                user_datetime_utc = user_datetime_tz.astimezone(pytz.UTC)
                utc_time_str = user_datetime_utc.strftime("%H:%M")
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ UTC –≤—Ä–µ–º–µ–Ω–∏
                if utc_time_str not in notification_groups:
                    notification_groups[utc_time_str] = []
                notification_groups[utc_time_str].append(user.telegram_id)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {e}")
                continue
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –≤—Ä–µ–º–µ–Ω–∏
        for utc_time, user_ids in notification_groups.items():
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º closure –ø—Ä–æ–±–ª–µ–º—É - —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
            def create_notification_job(users_list):
                def job():
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º thread-safe –ø–æ–¥—Ö–æ–¥ –∫–∞–∫ –≤ –Ω–æ–≤–æ–º –º–µ—Ç–æ–¥–µ
                    def run_in_thread():
                        try:
                            new_loop = asyncio.new_event_loop()
                            asyncio.set_event_loop(new_loop)
                            new_loop.run_until_complete(self._send_notifications_to_users_impl(users_list))
                        finally:
                            try:
                                new_loop.close()
                            except:
                                pass
                    
                    import threading
                    thread = threading.Thread(target=run_in_thread, daemon=True)
                    thread.start()
                    
                return job
            
            schedule.every().day.at(utc_time).do(create_notification_job(user_ids.copy()))
            print(f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ {utc_time} UTC –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        print(f"üìÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ {len(notification_groups)} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    def reload_notification_schedule(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ –∫–æ–º–∞–Ω–¥—ã)"""
        print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        self._schedule_daily_notifications()
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    def _run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ (–Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ)
        last_reload = time.time()
        reload_interval = 6 * 60 * 60  # 6 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        while True:
            schedule.run_pending()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            current_time = time.time()
            if current_time - last_reload > reload_interval:
                print("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
                self._schedule_daily_notifications()
                last_reload = current_time
            
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–º–µ–Ω—é)"""
        text = update.message.text
        user_id = str(update.effective_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        if text == "üóì –°–µ–≥–æ–¥–Ω—è":
            await self.today_command(update, context)
        elif text == "üì• –ò–º–ø–æ—Ä—Ç VCF":
            await self.import_command(update, context)
        elif text == "üí° –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã":
            await self.potential_clients_command(update, context)
        elif text == "üí∞ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥":
            await self.potential_revenue_command(update, context)
        elif text == "‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π":
            await self.notifications_menu_command(update, context)
        elif text == "üÜò –ü–æ–º–æ—â—å":
            await self.help_command(update, context)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_state = self.user_states.get(user_id, {})
            
            if user_state.get('state') == 'waiting_for_time':
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                await self._handle_time_input(update, context, text)
            elif user_state.get('state') == 'waiting_for_timezone':
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
                await self._handle_timezone_input(update, context, text)
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
                import re
                if re.match(r'^([01]?[0-9]|2[0-3]):[0-5][0-9]$', text):
                    # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –≤—Ä–µ–º—è, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
                    await self._handle_time_input(update, context, text)
                else:
                    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await update.message.reply_text(
                        "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.\n"
                        "–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ üÜò –ü–æ–º–æ—â—å",
                        reply_markup=self._get_main_keyboard()
                    )
    
    async def notifications_menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        user_id = str(update.effective_user.id)
        
        user = self.sheets_manager.get_user_by_telegram_id(user_id)
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        current_time = getattr(user, 'notification_time', '20:15')
        current_timezone = getattr(user, 'timezone', 'Asia/Almaty')
        
        if current_time == "disabled":
            status = "üî¥ –û—Ç–∫–ª—é—á–µ–Ω—ã"
        else:
            status = "üü¢ –í–∫–ª—é—á–µ–Ω—ã"
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [InlineKeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="change_time")],
            [InlineKeyboardButton("üåç –ò–∑–º–µ–Ω–∏—Ç—å –∑–æ–Ω—É", callback_data="change_timezone")],
            [InlineKeyboardButton("üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="disable_notifications")] if current_time != "disabled" else [InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="enable_notifications")],
            [InlineKeyboardButton("üìä –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="test_notification")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        response = f"‚è∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        response += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
        response += f"üïê –í—Ä–µ–º—è: {current_time}\n"
        response += f"üåç –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: {current_timezone}\n\n"
        response += f"<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</i>"
        
        await update.message.reply_text(
            response,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = str(query.from_user.id)
        
        if data == "change_time":
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            self.user_states[user_id] = {'state': 'waiting_for_time'}
            
            await query.edit_message_text(
                "üïê <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>HH:MM</code>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>08:30</code> –∏–ª–∏ <code>20:15</code>\n\n"
                "‚è≥ –û–∂–∏–¥–∞—é –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏...",
                parse_mode=ParseMode.HTML
            )
        
        elif data == "change_timezone":
            await query.edit_message_text(
                "üåç <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –Ω–æ–≤–æ–π –∑–æ–Ω–æ–π:\n"
                "<code>/notifications [–≤—Ä–µ–º—è] [–∑–æ–Ω–∞]</code>\n\n"
                "<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–æ–Ω—ã:</b>\n"
                "‚Ä¢ Asia/Almaty (–ê–ª–º–∞—Ç—ã)\n"
                "‚Ä¢ Europe/Moscow (–ú–æ—Å–∫–≤–∞)\n"
                "‚Ä¢ Asia/Tashkent (–¢–∞—à–∫–µ–Ω—Ç)\n"
                "‚Ä¢ Asia/Bishkek (–ë–∏—à–∫–µ–∫)\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/notifications 20:15 Europe/Moscow</code>",
                parse_mode=ParseMode.HTML
            )
        
        elif data == "disable_notifications":
            # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            try:
                result = self.sheets_manager.sheets_service.spreadsheets().values().get(
                    spreadsheetId=self.sheets_manager.master_sheet_id,
                    range='A:H'
                ).execute()
                
                values = result.get('values', [])
                row_number = None
                
                for i, row in enumerate(values[1:], start=2):
                    if len(row) >= 1 and row[0] == user_id:
                        row_number = i
                        break
                
                if row_number:
                    self.sheets_manager.sheets_service.spreadsheets().values().update(
                        spreadsheetId=self.sheets_manager.master_sheet_id,
                        range=f'G{row_number}',
                        valueInputOption='USER_ENTERED',
                        body={'values': [['disabled']]}
                    ).execute()
                    
                    self.notification_scheduler.reload_scheduler()
                    
                    await query.edit_message_text("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
                else:
                    await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
            except Exception as e:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
        
        elif data == "enable_notifications":
            await query.edit_message_text(
                "üü¢ <b>–í–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "<code>/notifications 20:15 Asia/Almaty</code>\n\n"
                "–ó–∞–º–µ–Ω–∏—Ç–µ –≤—Ä–µ–º—è –∏ –∑–æ–Ω—É –Ω–∞ –Ω—É–∂–Ω—ã–µ –≤–∞–º",
                parse_mode=ParseMode.HTML
            )
        
        elif data == "test_notification":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            try:
                await self._send_notifications_to_users_impl([user_id])
                await query.edit_message_text("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            except Exception as e:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
        
        elif data == "back_to_menu":
            await query.edit_message_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            await asyncio.sleep(1)
            await query.message.reply_text(
                "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=self._get_main_keyboard()
            )
    
    async def _handle_time_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, time_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        user_id = str(update.effective_user.id)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        import re
        if not re.match(r'^([01]?[0-9]|2[0-3]):[0-5][0-9]$', time_text):
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <code>HH:MM</code>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>08:30</code> –∏–ª–∏ <code>20:15</code>",
                parse_mode=ParseMode.HTML,
                reply_markup=self._get_main_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = self.sheets_manager.get_user_by_telegram_id(user_id)
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=self._get_main_keyboard())
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è
        try:
            success = self.sheets_manager.update_user_notification_settings(
                user_id, time_text, getattr(user, 'timezone', 'Asia/Almaty')
            )
            
            if success:
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                self.notification_adapter.reload_scheduler()
                
                await update.message.reply_text(
                    f"‚úÖ <b>–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
                    f"üïê –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: <code>{time_text}</code>\n"
                    f"üåç –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: <code>{getattr(user, 'timezone', 'Asia/Almaty')}</code>\n\n"
                    f"‚ö° –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω",
                    parse_mode=ParseMode.HTML,
                    reply_markup=self._get_main_keyboard()
                )
            else:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=self._get_main_keyboard()
                )
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                reply_markup=self._get_main_keyboard()
            )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states.pop(user_id, None)
    
    async def _handle_timezone_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, timezone_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã"""
        user_id = str(update.effective_user.id)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
        try:
            import pytz
            pytz.timezone(timezone_text)
        except pytz.UnknownTimeZoneError:
            await update.message.reply_text(
                f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: <code>{timezone_text}</code>\n\n"
                f"<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–æ–Ω—ã:</b>\n"
                f"‚Ä¢ Asia/Almaty (–ê–ª–º–∞—Ç—ã)\n"
                f"‚Ä¢ Europe/Moscow (–ú–æ—Å–∫–≤–∞)\n"
                f"‚Ä¢ Asia/Tashkent (–¢–∞—à–∫–µ–Ω—Ç)\n"
                f"‚Ä¢ Asia/Bishkek (–ë–∏—à–∫–µ–∫)",
                parse_mode=ParseMode.HTML,
                reply_markup=self._get_main_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
        user = self.sheets_manager.get_user_by_telegram_id(user_id)
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=self._get_main_keyboard())
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∑–æ–Ω—É
        try:
            success = self.sheets_manager.update_user_notification_settings(
                user_id, getattr(user, 'notification_time', '20:15'), timezone_text
            )
            
            if success:
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                self.notification_adapter.reload_scheduler()
                
                await update.message.reply_text(
                    f"‚úÖ <b>–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
                    f"üïê –í—Ä–µ–º—è: <code>{getattr(user, 'notification_time', '20:15')}</code>\n"
                    f"üåç –ù–æ–≤–∞—è –∑–æ–Ω–∞: <code>{timezone_text}</code>\n\n"
                    f"‚ö° –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω",
                    parse_mode=ParseMode.HTML,
                    reply_markup=self._get_main_keyboard()
                )
            else:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=self._get_main_keyboard()
                )
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–æ–Ω—ã: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                reply_markup=self._get_main_keyboard()
            )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states.pop(user_id, None)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç Event Loop –æ—à–∏–±–æ–∫"""
        print("üöÄ –ó–∞–ø—É—Å–∫ EventGREEN Bot...")
        print(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ —Ç–∞–±–ª–∏—Ü: {self.table_manager.count_available_tables()}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notification_adapter.start_scheduler()
        print("‚è∞ –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
        try:
            self.application.run_polling(
                drop_pending_updates=True,  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                close_loop=False  # –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º event loop –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            )
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
            print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞...")
            try:
                self.application.run_polling(
                    drop_pending_updates=True,
                    close_loop=False
                )
            except Exception as restart_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {restart_error}")
                raise

if __name__ == "__main__":
    try:
        bot = EventGREENBot()
        bot.run()
    except KeyboardInterrupt:
        print("\n‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")