#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π VCF Normalizer - –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏
–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç combined_text –∏ phone –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
"""

import vobject
from typing import List, Dict
import re

class SimpleVCFNormalizer:
    """–ü—Ä–æ—Å—Ç–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä VCF —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self):
        pass
    
    def normalize_vcf(self, vcf_content: str) -> List[Dict[str, str]]:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç VCF —Ñ–∞–π–ª –≤ –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç
        
        Args:
            vcf_content: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ VCF —Ñ–∞–π–ª–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å combined_text –∏ phone
        """
        contacts = []
        
        try:
            # –ü–∞—Ä—Å–∏–º VCF
            vcf_objects = vobject.readComponents(vcf_content)
            
            for vcard in vcf_objects:
                contact = self._extract_contact_data(vcard)
                if contact:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ
                    contacts.append(contact)
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ VCF: {e}")
            return []
        
        print(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ VCF")
        return contacts
    
    def _extract_contact_data(self, vcard) -> Dict[str, str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏"""
        
        all_text_parts = []
        phone = ""
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–≤–æ–π—Å—Ç–≤–∞–º –∫–∞—Ä—Ç–æ—á–∫–∏
        for property_name in vcard.contents:
            try:
                properties = vcard.contents[property_name]
                
                for prop in properties:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
                    if property_name.lower() == 'tel':
                        if not phone:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
                            phone = self._clean_phone(str(prop.value))
                    
                    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ - –≤ combined_text (–∏—Å–∫–ª—é—á–∞–µ–º N —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å FN)
                    elif property_name.lower() in ['fn', 'org', 'title', 'note', 'nickname', 'email']:
                        text_value = self._extract_text_value(prop)
                        if text_value:
                            all_text_parts.append(text_value)
            
            except Exception as e:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                continue
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç (–ë–ï–ó —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - –æ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)
        combined_text = ' '.join(all_text_parts).strip()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ
        if combined_text or phone:
            return {
                'combined_text': combined_text,
                'phone': phone
            }
        
        return None
    
    def _extract_text_value(self, prop) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–≤–æ–π—Å—Ç–≤–∞"""
        try:
            if hasattr(prop, 'value'):
                value = prop.value
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, N - structured name)
                if isinstance(value, list):
                    return ' '.join(str(v) for v in value if str(v).strip())
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                elif isinstance(value, str):
                    return value.strip()
                
                # –ï—Å–ª–∏ —ç—Ç–æ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ
                else:
                    return str(value).strip()
            
            return ""
            
        except Exception:
            return ""
    
    def _clean_phone(self, phone: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        if not phone:
            return ""
        
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –ø–ª—é—Å–∞
        cleaned = re.sub(r'[^\d+]', '', phone)
        
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ +7 (–¥–ª—è –†–æ—Å—Å–∏–∏/–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞)
        if cleaned.startswith('8') and len(cleaned) == 11:
            cleaned = '+7' + cleaned[1:]
        
        return cleaned

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    import os
    
    normalizer = SimpleVCFNormalizer()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ
    vcf_path = "/home/imort/eventGREEN_v4/–ö–∞—Ä—Ç–æ—á–∫–∏ vCard –∏–∑ iCloud(1).vcf"
    
    if os.path.exists(vcf_path):
        print("üß™ –¢–ï–°–¢ –ü–†–û–°–¢–û–ì–û VCF NORMALIZER")
        print("=" * 50)
        
        with open(vcf_path, 'r', encoding='utf-8') as f:
            vcf_content = f.read()
        
        contacts = normalizer.normalize_vcf(vcf_content)
        
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(contacts)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        print("\nüìã –ü–ï–†–í–´–ï 10 –ö–û–ù–¢–ê–ö–¢–û–í:")
        print("-" * 80)
        for i, contact in enumerate(contacts[:10], 1):
            print(f"{i:2d}. Combined: {contact['combined_text'][:60]}...")
            print(f"    Phone: {contact['phone']}")
            print()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        with_text = sum(1 for c in contacts if c['combined_text'])
        with_phone = sum(1 for c in contacts if c['phone'])
        avg_text_length = sum(len(c['combined_text']) for c in contacts) / len(contacts) if contacts else 0
        
        print(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º: {with_text}")
        print(f"   –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: {with_phone}")
        print(f"   –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {avg_text_length:.0f} —Å–∏–º–≤–æ–ª–æ–≤")
        
    else:
        print(f"‚ùå VCF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {vcf_path}")