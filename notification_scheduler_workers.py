#!/usr/bin/env python3
"""
CLOUDFLARE WORKERS –°–û–í–ú–ï–°–¢–ò–ú–´–ô –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
–ó–∞–º–µ–Ω—è–µ—Ç threading.Timer –Ω–∞ cron-based –ø–æ–¥—Ö–æ–¥
"""

import pytz
import json
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Callable
from dataclasses import dataclass, asdict
from loguru import logger


@dataclass
class NotificationUser:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    telegram_id: str
    username: str
    notification_time: str  # "HH:MM" –∏–ª–∏ "disabled"
    timezone: str          # "Asia/Almaty"
    status: str           # "trial", "pro", "expired"


@dataclass
class ScheduledNotification:
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è Workers"""
    utc_time: str          # "HH:MM" –≤—Ä–µ–º—è –≤ UTC
    user_ids: List[str]    # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    local_info: str        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–∞—Ö
    cron_expression: str   # Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è Workers
    created_at: str        # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è


class NotificationSchedulerWorkers:
    """
    Cloudflare Workers —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    
    –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–¥—Ö–æ–¥:
    1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç cron expressions –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    2. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ JSON –¥–ª—è Workers
    3. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç fallback —á–µ—Ä–µ–∑ webhook –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    """
    
    def __init__(self, 
                 user_loader: Callable[[], List[NotificationUser]],
                 notification_sender: Callable[[List[str]], None],
                 workers_mode: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Workers-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        
        Args:
            user_loader: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            notification_sender: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            workers_mode: True –¥–ª—è Cloudflare Workers, False –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        """
        self.user_loader = user_loader
        self.notification_sender = notification_sender
        self.workers_mode = workers_mode
        self.scheduled_notifications: Dict[str, ScheduledNotification] = {}
        
        logger.info(f"üåç NotificationSchedulerWorkers –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (workers_mode: {workers_mode})")
    
    def load_users(self) -> List[NotificationUser]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            users = self.user_loader()
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return users
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def convert_to_utc(self, local_time: str, timezone_str: str) -> Optional[str]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ UTC
        
        Args:
            local_time: –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM"
            timezone_str: –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
            
        Returns:
            UTC –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM" –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ü–∞—Ä—Å–∏–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            local_dt = datetime.strptime(local_time, "%H:%M").time()
            
            # –°–æ–∑–¥–∞–µ–º timezone –æ–±—ä–µ–∫—Ç
            user_tz = pytz.timezone(timezone_str)
            
            # –ë–µ—Ä–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            today = datetime.now().date()
            
            # –°–æ–∑–¥–∞–µ–º datetime –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ
            naive_dt = datetime.combine(today, local_dt)
            local_dt_tz = user_tz.localize(naive_dt)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
            utc_dt = local_dt_tz.astimezone(pytz.UTC)
            utc_time_str = utc_dt.strftime("%H:%M")
            
            logger.debug(f"üîÑ {local_time} {timezone_str} -> {utc_time_str} UTC")
            return utc_time_str
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ {local_time} {timezone_str}: {e}")
            return None
    
    def time_to_cron(self, utc_time: str) -> str:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è UTC –≤ cron expression
        
        Args:
            utc_time: –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM"
            
        Returns:
            Cron expression (–Ω–∞–ø—Ä–∏–º–µ—Ä, "15 20 * * *" –¥–ª—è 20:15)
        """
        try:
            hour, minute = utc_time.split(":")
            # –§–æ—Ä–º–∞—Ç: –º–∏–Ω—É—Ç–∞ —á–∞—Å –¥–µ–Ω—å –º–µ—Å—è—Ü –¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏
            cron_expr = f"{minute} {hour} * * *"
            logger.debug(f"üïê {utc_time} UTC -> cron: {cron_expr}")
            return cron_expr
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è cron –¥–ª—è {utc_time}: {e}")
            return "0 0 * * *"  # fallback - –ø–æ–ª–Ω–æ—á—å
    
    def generate_workers_config(self) -> Dict:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Cloudflare Workers
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å cron triggers –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        """
        workers_config = {
            "cron_triggers": [],
            "notifications": {},
            "generated_at": datetime.now().isoformat(),
            "timezone": "UTC"
        }
        
        for notification_id, notification in self.scheduled_notifications.items():
            # –î–æ–±–∞–≤–ª—è–µ–º cron trigger
            cron_trigger = {
                "cron": notification.cron_expression,
                "notification_id": notification_id
            }
            workers_config["cron_triggers"].append(cron_trigger)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            workers_config["notifications"][notification_id] = asdict(notification)
        
        logger.info(f"üîß –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è {len(workers_config['cron_triggers'])} cron triggers")
        return workers_config
    
    def save_workers_config(self, file_path: str = "/tmp/workers_notifications.json"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Workers –≤ —Ñ–∞–π–ª"""
        try:
            config = self.generate_workers_config()
            
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            
            logger.info(f"üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Workers —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {file_path}")
            return file_path
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return None
    
    def schedule_notifications(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            logger.info("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Workers-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            self.scheduled_notifications.clear()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = self.load_users()
            if not users:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ UTC –≤—Ä–µ–º–µ–Ω–∏
            utc_groups = {}
            
            for user in users:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if user.notification_time == "disabled":
                    logger.debug(f"‚è∏Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –æ—Ç–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                    continue
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if user.status not in ['trial', 'pro']:
                    logger.debug(f"‚è∏Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω ({user.status})")
                    continue
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ UTC
                utc_time = self.convert_to_utc(user.notification_time, user.timezone)
                if not utc_time:
                    continue
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ UTC –≤—Ä–µ–º–µ–Ω–∏
                if utc_time not in utc_groups:
                    utc_groups[utc_time] = {
                        "user_ids": [],
                        "local_info": []
                    }
                
                utc_groups[utc_time]["user_ids"].append(user.telegram_id)
                utc_groups[utc_time]["local_info"].append(f"{user.notification_time} {user.timezone}")
                
                logger.debug(f"üë§ {user.username}: {user.notification_time} {user.timezone} -> {utc_time} UTC")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_count = 0
            
            for utc_time, group_data in utc_groups.items():
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º cron expression
                cron_expr = self.time_to_cron(utc_time)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ª–æ–≥–æ–≤
                local_info_str = ", ".join(group_data["local_info"])
                user_ids = group_data["user_ids"]
                
                # –°–æ–∑–¥–∞–µ–º ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                notification_id = f"notification_{utc_time.replace(':', '_')}"
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                scheduled_notification = ScheduledNotification(
                    utc_time=utc_time,
                    user_ids=user_ids,
                    local_info=local_info_str,
                    cron_expression=cron_expr,
                    created_at=datetime.now().isoformat()
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                self.scheduled_notifications[notification_id] = scheduled_notification
                notification_count += 1
                
                logger.info(f"üìÖ {utc_time} UTC ({cron_expr}) - {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                logger.debug(f"   –õ–æ–∫–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞: {local_info_str}")
            
            logger.info(f"üéØ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ {notification_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Workers")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Workers
            if self.workers_mode:
                self.save_workers_config()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    async def execute_notification(self, notification_id: str):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ ID (–¥–ª—è Workers –∏ webhook)
        
        Args:
            notification_id: ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        if notification_id not in self.scheduled_notifications:
            logger.error(f"‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        notification = self.scheduled_notifications[notification_id]
        
        logger.info(f"üéØ –í–´–ü–û–õ–ù–ï–ù–ò–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_id}")
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(notification.user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        logger.info(f"üåç –õ–æ–∫–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {notification.local_info}")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if asyncio.iscoroutinefunction(self.notification_sender):
                await self.notification_sender(notification.user_ids)
            else:
                self.notification_sender(notification.user_ids)
            
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ: {notification_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π {notification_id}: {e}")
            return False
    
    def get_status(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        now_utc = datetime.now(pytz.UTC)
        
        scheduled_notifications = []
        for notification_id, notification in self.scheduled_notifications.items():
            scheduled_notifications.append({
                "notification_id": notification_id,
                "utc_time": notification.utc_time,
                "cron_expression": notification.cron_expression,
                "user_count": len(notification.user_ids),
                "local_info": notification.local_info
            })
        
        return {
            "workers_mode": self.workers_mode,
            "scheduled_notifications": len(self.scheduled_notifications),
            "current_utc_time": now_utc.strftime("%H:%M:%S"),
            "notifications": scheduled_notifications
        }
    
    def get_workers_wrangler_config(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç wrangler.toml –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Cloudflare Workers
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π wrangler.toml
        """
        wrangler_config = """
# Cloudflare Workers –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è EventGREEN Bot
name = "eventgreen-notifications"
compatibility_date = "2023-10-30"

# Cron triggers –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""
        
        for notification_id, notification in self.scheduled_notifications.items():
            wrangler_config += f"""
[[triggers.crons]]
cron = "{notification.cron_expression}"
# {notification.local_info} -> {notification.utc_time} UTC
"""
        
        return wrangler_config.strip()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def create_scheduler(user_loader: Callable, notification_sender: Callable, workers_mode: bool = False):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
    
    Args:
        user_loader: –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        notification_sender: –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π  
        workers_mode: True –¥–ª—è Cloudflare Workers
        
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    """
    if workers_mode:
        logger.info("üåç –°–æ–∑–¥–∞–µ–º Workers-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
        return NotificationSchedulerWorkers(user_loader, notification_sender, workers_mode=True)
    else:
        logger.info("üñ•Ô∏è –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å fallback")
        # –ò–º–ø–æ—Ä—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        try:
            from notification_scheduler_v2 import NotificationSchedulerV2
            return NotificationSchedulerV2(user_loader, notification_sender)
        except ImportError:
            logger.warning("‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Workers —Ä–µ–∂–∏–º")
            return NotificationSchedulerWorkers(user_loader, notification_sender, workers_mode=False)