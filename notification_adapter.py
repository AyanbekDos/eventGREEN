#!/usr/bin/env python3
"""
–ê–î–ê–ü–¢–ï–† –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô - –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–°
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
"""

import os
import asyncio
from typing import List, Callable, Dict
from loguru import logger
from dataclasses import dataclass


@dataclass
class NotificationUser:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    telegram_id: str
    username: str
    notification_time: str  # "HH:MM" –∏–ª–∏ "disabled"
    timezone: str          # "Asia/Almaty"
    status: str           # "trial", "pro", "expired"


@dataclass
class NotificationConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    workers_mode: bool = False
    fallback_to_local: bool = True
    webhook_url: str = ""
    environment: str = "local"  # "local", "workers", "development"


class NotificationAdapter:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    """
    
    def __init__(self, 
                 user_loader: Callable,
                 notification_sender: Callable,
                 config: NotificationConfig = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞
        
        Args:
            user_loader: –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            notification_sender: –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        self.user_loader = user_loader
        self.notification_sender = notification_sender
        self.config = config or self._detect_environment()
        self.scheduler = None
        
        logger.info(f"üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {self.config.environment} (workers_mode: {self.config.workers_mode})")
        self._initialize_scheduler()
        
        logger.info(f"üîß NotificationAdapter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Ä–µ–∂–∏–º: {self.config.environment})")
    
    def _detect_environment(self) -> NotificationConfig:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Cloudflare Workers
        is_workers = (
            os.getenv('CF_WORKER') == 'true' or
            os.getenv('CLOUDFLARE_WORKER') == 'true' or
            'cloudflare' in os.getenv('ENVIRONMENT', '').lower() or
            os.getenv('WORKERS_MODE') == 'true'
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ threading
        try:
            import threading
            has_threading = True
        except ImportError:
            has_threading = False
        
        if is_workers or not has_threading:
            environment = "workers"
            workers_mode = True
            logger.info("üåç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–∫—Ä—É–∂–µ–Ω–∏–µ Cloudflare Workers")
        else:
            environment = "local"
            workers_mode = False
            logger.info("üñ•Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        
        return NotificationConfig(
            workers_mode=workers_mode,
            fallback_to_local=not is_workers,
            environment=environment
        )
    
    def _initialize_scheduler(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        try:
            if self.config.workers_mode:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Workers-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                from notification_scheduler_workers import NotificationSchedulerWorkers
                self.scheduler = NotificationSchedulerWorkers(
                    user_loader=self.user_loader,
                    notification_sender=self.notification_sender,
                    workers_mode=True
                )
                logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω Workers-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
                
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å threading
                try:
                    from notification_scheduler_v2 import NotificationSchedulerV2
                    self.scheduler = NotificationSchedulerV2(
                        user_loader=self.user_loader,
                        notification_sender=self.notification_sender
                    )
                    logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ V2")
                    
                except ImportError as e:
                    logger.warning(f"‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                    if self.config.fallback_to_local:
                        # Fallback –∫ Workers –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
                        from notification_scheduler_workers import NotificationSchedulerWorkers
                        self.scheduler = NotificationSchedulerWorkers(
                            user_loader=self.user_loader,
                            notification_sender=self.notification_sender,
                            workers_mode=False
                        )
                        logger.info("‚úÖ Fallback –∫ Workers-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É")
                    else:
                        raise
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            raise
    
    def schedule_notifications(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not self.scheduler:
            logger.error("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        try:
            self.scheduler.schedule_notifications()
            
            # –î–ª—è Workers —Ä–µ–∂–∏–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if self.config.workers_mode and hasattr(self.scheduler, 'save_workers_config'):
                config_path = self.scheduler.save_workers_config()
                logger.info(f"üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Workers —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {config_path}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            return False
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not self.scheduler:
            logger.error("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        try:
            if hasattr(self.scheduler, 'start_scheduler'):
                self.scheduler.start_scheduler()
            else:
                # –î–ª—è Workers –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º
                self.schedule_notifications()
            
            logger.info("üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            return False
    
    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not self.scheduler:
            return True
        
        try:
            if hasattr(self.scheduler, 'stop_scheduler'):
                self.scheduler.stop_scheduler()
            
            logger.info("‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            return False
    
    def reload_scheduler(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if not self.scheduler:
            logger.error("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        try:
            if hasattr(self.scheduler, 'reload_scheduler'):
                self.scheduler.reload_scheduler()
            else:
                # –î–ª—è Workers –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                self.schedule_notifications()
            
            logger.info("üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            return False
    
    async def execute_notification(self, notification_id: str = None, user_ids: List[str] = None):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–¥–ª—è webhook –≤—ã–∑–æ–≤–æ–≤ –æ—Ç Workers)
        
        Args:
            notification_id: ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è Workers)
            user_ids: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞)
        """
        if not self.scheduler:
            logger.error("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        try:
            if notification_id and hasattr(self.scheduler, 'execute_notification'):
                # Workers —Ä–µ–∂–∏–º - –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ ID
                return await self.scheduler.execute_notification(notification_id)
            
            elif user_ids:
                # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏
                if asyncio.iscoroutinefunction(self.notification_sender):
                    await self.notification_sender(user_ids)
                else:
                    self.notification_sender(user_ids)
                return True
            
            else:
                logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω notification_id –∏–ª–∏ user_ids")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def get_status(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if not self.scheduler:
            return {
                "error": "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                "environment": self.config.environment,
                "workers_mode": self.config.workers_mode
            }
        
        try:
            status = self.scheduler.get_status()
            status.update({
                "adapter_environment": self.config.environment,
                "adapter_workers_mode": self.config.workers_mode
            })
            return status
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {"error": str(e)}
    
    def get_scheduler_type(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if not self.scheduler:
            return "none"
        
        scheduler_class = self.scheduler.__class__.__name__
        return f"{scheduler_class} ({self.config.environment})"
    
    def is_workers_compatible(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Cloudflare Workers"""
        return self.config.workers_mode or hasattr(self.scheduler, 'workers_mode')


# –§—É–Ω–∫—Ü–∏—è-—Ñ–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞
def create_notification_adapter(user_loader: Callable, 
                              notification_sender: Callable,
                              force_workers: bool = False) -> NotificationAdapter:
    """
    –°–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
    
    Args:
        user_loader: –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        notification_sender: –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        force_workers: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Workers —Ä–µ–∂–∏–º
        
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    config = NotificationConfig()
    
    if force_workers:
        config.workers_mode = True
        config.environment = "workers"
        logger.info("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω Workers —Ä–µ–∂–∏–º")
    
    return NotificationAdapter(
        user_loader=user_loader,
        notification_sender=notification_sender,
        config=config
    )