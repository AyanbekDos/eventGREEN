#!/usr/bin/env python3
"""
–û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–û–î–£–õ–¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –° –ù–ê–î–ï–ñ–ù–´–ú –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–ú
–ó–∞–º–µ–Ω—è–µ—Ç –Ω–µ–Ω–∞–¥–µ–∂–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É schedule –Ω–∞ threading.Timer
"""

import threading
import time
import pytz
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Callable
from dataclasses import dataclass
from loguru import logger


@dataclass
class NotificationUser:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    telegram_id: str
    username: str
    notification_time: str  # "HH:MM" –∏–ª–∏ "disabled"
    timezone: str          # "Asia/Almaty"
    status: str           # "trial", "pro", "expired"


@dataclass
class TimerTask:
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ —Ç–∞–π–º–µ—Ä—É"""
    target_time: datetime  # –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ UTC
    user_ids: List[str]    # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    local_info: str        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ª–æ–≥–æ–≤
    timer: threading.Timer # –°–∞–º —Ç–∞–π–º–µ—Ä


class NotificationSchedulerV2:
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –Ω–∞–¥–µ–∂–Ω—ã–º —Ç–∞–π–º–µ—Ä–æ–º
    
    –û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
    1. –ó–∞–º–µ–Ω–µ–Ω –Ω–µ–Ω–∞–¥–µ–∂–Ω—ã–π schedule –Ω–∞ threading.Timer
    2. –¢–æ—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ —Å–µ–∫—É–Ω–¥—É
    3. –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    """
    
    def __init__(self, 
                 user_loader: Callable[[], List[NotificationUser]],
                 notification_sender: Callable[[List[str]], None]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        
        Args:
            user_loader: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
            notification_sender: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        self.user_loader = user_loader
        self.notification_sender = notification_sender
        self.active_tasks: Dict[str, TimerTask] = {}
        self.is_running = False
        
        logger.info("üîß NotificationSchedulerV2 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–Ω–∞–¥–µ–∂–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
    
    def load_users(self) -> List[NotificationUser]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            users = self.user_loader()
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return users
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def convert_to_utc(self, local_time: str, timezone_str: str) -> Optional[str]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ UTC
        
        Args:
            local_time: –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM"
            timezone_str: –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Asia/Almaty")
            
        Returns:
            UTC –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM" –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ü–∞—Ä—Å–∏–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            local_dt = datetime.strptime(local_time, "%H:%M").time()
            
            # –°–æ–∑–¥–∞–µ–º timezone –æ–±—ä–µ–∫—Ç
            user_tz = pytz.timezone(timezone_str)
            
            # –ë–µ—Ä–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            today = datetime.now().date()
            
            # –°–æ–∑–¥–∞–µ–º datetime –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ
            naive_dt = datetime.combine(today, local_dt)
            local_dt_tz = user_tz.localize(naive_dt)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
            utc_dt = local_dt_tz.astimezone(pytz.UTC)
            utc_time_str = utc_dt.strftime("%H:%M")
            
            logger.debug(f"üîÑ {local_time} {timezone_str} -> {utc_time_str} UTC")
            return utc_time_str
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ {local_time} {timezone_str}: {e}")
            return None
    
    def calculate_delay_to_time(self, utc_time: str) -> tuple:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ UTC –≤—Ä–µ–º–µ–Ω–∏
        
        Args:
            utc_time: –í—Ä–µ–º—è UTC –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM"
            
        Returns:
            (delay_seconds, target_datetime) –∏–ª–∏ (None, None) –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
            target_time = datetime.strptime(utc_time, "%H:%M").time()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC
            now_utc = datetime.now(pytz.UTC)
            
            # –°–æ–∑–¥–∞–µ–º target datetime –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            target_datetime = datetime.combine(now_utc.date(), target_time)
            target_datetime = pytz.UTC.localize(target_datetime)
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            if target_datetime <= now_utc:
                target_datetime += timedelta(days=1)
                logger.info(f"‚è≠Ô∏è –í—Ä–µ–º—è {utc_time} UTC —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
            delay = (target_datetime - now_utc).total_seconds()
            
            logger.info(f"‚è∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {delay:.1f} —Å–µ–∫ ({target_datetime.strftime('%Y-%m-%d %H:%M:%S')} UTC)")
            
            return delay, target_datetime
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è {utc_time}: {e}")
            return None, None
    
    def create_notification_task(self, user_ids: List[str], local_info: str, task_id: str):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ —Ç–∞–π–º–µ—Ä—É"""
        def execute_notification():
            logger.info(f"üéØ –í–´–ü–û–õ–ù–ï–ù–ò–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (task_id: {task_id})")
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            logger.info(f"üåç –õ–æ–∫–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {local_info}")
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                self.notification_sender(user_ids)
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ (task_id: {task_id})")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (task_id: {task_id}): {e}")
            
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                if task_id in self.active_tasks:
                    del self.active_tasks[task_id]
                    logger.debug(f"üóëÔ∏è –ó–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö")
        
        return execute_notification
    
    def schedule_notifications(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            logger.info("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
            self.clear_all_tasks()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = self.load_users()
            if not users:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ UTC –≤—Ä–µ–º–µ–Ω–∏
            utc_groups = {}
            
            for user in users:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if user.notification_time == "disabled":
                    logger.debug(f"‚è∏Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –æ—Ç–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                    continue
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if user.status not in ['trial', 'pro']:
                    logger.debug(f"‚è∏Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω ({user.status})")
                    continue
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ UTC
                utc_time = self.convert_to_utc(user.notification_time, user.timezone)
                if not utc_time:
                    continue
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ UTC –≤—Ä–µ–º–µ–Ω–∏
                if utc_time not in utc_groups:
                    utc_groups[utc_time] = {
                        "user_ids": [],
                        "local_info": []
                    }
                
                utc_groups[utc_time]["user_ids"].append(user.telegram_id)
                utc_groups[utc_time]["local_info"].append(f"{user.notification_time} {user.timezone}")
                
                logger.debug(f"üë§ {user.username}: {user.notification_time} {user.timezone} -> {utc_time} UTC")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
            current_utc = datetime.now(pytz.UTC)
            scheduled_count = 0
            
            for utc_time, group_data in utc_groups.items():
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                delay, target_datetime = self.calculate_delay_to_time(utc_time)
                
                if delay is None:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É {utc_time}")
                    continue
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ª–æ–≥–æ–≤
                local_info_str = ", ".join(group_data["local_info"])
                user_ids = group_data["user_ids"]
                
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–¥–∞—á–∏
                task_id = f"{utc_time}_{len(self.active_tasks)}"
                
                # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–¥–∞—á–∏
                task_function = self.create_notification_task(user_ids, local_info_str, task_id)
                
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä
                timer = threading.Timer(delay, task_function)
                timer.daemon = True  # Daemon timer –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏
                task = TimerTask(
                    target_time=target_datetime,
                    user_ids=user_ids,
                    local_info=local_info_str,
                    timer=timer
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
                self.active_tasks[task_id] = task
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
                timer.start()
                scheduled_count += 1
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
                utc_dt = datetime.strptime(utc_time, "%H:%M").time()
                current_time = current_utc.time()
                
                if utc_dt > current_time:
                    status = "üü¢ –ë–£–î–£–©–ï–ï"
                else:
                    status = "üî¥ –ü–†–û–®–ï–î–®–ï–ï (–∑–∞–≤—Ç—Ä–∞)"
                
                logger.info(f"‚è∞ {utc_time} UTC - {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {status}")
                logger.debug(f"   –õ–æ–∫–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞: {local_info_str}")
                logger.info(f"üîß –¢–∞–π–º–µ—Ä {task_id} –∑–∞–ø—É—â–µ–Ω (–≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –≤ {target_datetime.strftime('%H:%M:%S')})")
            
            logger.info(f"üéØ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ {scheduled_count} –Ω–∞–¥–µ–∂–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    def clear_all_tasks(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        logger.info(f"üßπ –û—á–∏—â–∞–µ–º {len(self.active_tasks)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
        
        for task_id, task in self.active_tasks.items():
            task.timer.cancel()
            logger.debug(f"‚ùå –¢–∞–π–º–µ—Ä {task_id} –æ—Ç–º–µ–Ω–µ–Ω")
        
        self.active_tasks.clear()
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.schedule_notifications()
        
        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π
        self.is_running = True
        
        logger.info("üöÄ –ù–∞–¥–µ–∂–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
    
    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.is_running = False
        self.clear_all_tasks()
        logger.info("‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def reload_scheduler(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        self.schedule_notifications()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")
    
    def get_status(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        now_utc = datetime.now(pytz.UTC)
        
        active_tasks = []
        for task_id, task in self.active_tasks.items():
            if task.target_time > now_utc:
                remaining = (task.target_time - now_utc).total_seconds()
                active_tasks.append({
                    "task_id": task_id,
                    "target_time": task.target_time.strftime("%Y-%m-%d %H:%M:%S UTC"),
                    "remaining_seconds": int(remaining),
                    "user_count": len(task.user_ids),
                    "local_info": task.local_info
                })
        
        return {
            "is_running": self.is_running,
            "active_tasks": len(self.active_tasks),
            "upcoming_tasks": len(active_tasks),
            "current_utc_time": now_utc.strftime("%H:%M:%S"),
            "tasks": active_tasks
        }
    
    def get_next_notifications(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        notifications = []
        
        for task_id, task in self.active_tasks.items():
            notifications.append({
                "next_run": task.target_time.strftime("%Y-%m-%d %H:%M:%S UTC"),
                "task_info": f"Task {task_id}: {len(task.user_ids)} users"
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        notifications.sort(key=lambda x: x["next_run"])
        return notifications